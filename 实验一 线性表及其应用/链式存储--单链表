#include<iostream>
#include<stdio.h>
#include<stdlib.h>
#include<windows.h>
using namespace std;

#define OK 1
#define ERROR 0
#define OVERFLOW -2

typedef int Status;
typedef int ElemType;
typedef struct LNode {//单链表存储结构
	ElemType data;
	struct LNode* next;
}LNode, * LinkList;

void InitList(LinkList &head) {//初始化单链表
	head = (LinkList)malloc(sizeof(LNode));
	head->next = NULL;
}

void CreatList(LinkList& head, int n) {//单链表创建
	LNode* p, * q;
	q = head;
	int i;
	for (i = n;i > 0;i--) {
		p = (LinkList)malloc(sizeof(LNode));
		cout << "请输入数据：";
		cin >> p->data;
		q->next = p;
		q=p;
	}
	q->next = NULL;
}

Status InsertList(LinkList& head, int i, ElemType e) {//单链表插入
	LNode* p, * s;
	int j=0;
	p = head;
	while (p && j < i - 1) {//定位到要插入位置的前一个结点
		p = p->next;
		j++;
	}
	if (!p || j > i - 1) return ERROR;
	s = (LinkList)malloc(sizeof(LNode));
	s->data = e;
	s->next = p->next;
	p->next = s;
	return OK;
}

Status PrintList(LNode* head) {//遍历
	LNode* p;
	p = head;
	p = p->next;
	while (p)
	{
		if (p->next == NULL)//注意限制条件，防止指针最后为空时越界访问
		{
			cout << p->data;
		}
		else cout << p->data << " ";
		p = p->next;
	}
	cout << endl;
	return OK;
}

Status DeleteList(LinkList& head, int a) {//删除节点
	LNode* p,*s;
	p = head;
	int i = 0;
	while (p && i < a - 1) {
		p = p->next;
		i++;
	}
	if (!p || i > a - 1) return ERROR;
	s = p->next;
	p->next = s->next;
	return OK;
}

int main() {
	LNode* head;
	InitList(head);
	cout << "输入元素个数：" ;
	int n;
	cin >> n;
	CreatList(head, n);
	PrintList(head);
	int i;
	ElemType e;
	cout << "插入位置：";
	cin >> i;
	cout << "插入数据：";
	cin >> e;
	InsertList(head, i, e);
	PrintList(head);
	int a;
	cout << "删除位置：";
	cin >> a;
	DeleteList(head, a);
	PrintList(head);
	return OK;
}
